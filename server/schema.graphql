# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input BooleanNullableFilter {
  equals: Boolean
  not: Boolean
}

type Categort {
  createdAt: DateTime!
  id: String!
  name: String
  products(orderBy: [ProductOrderByInput!], skip: Float, take: Float, where: ProductWhereInput): [Product!]!
  updatedAt: DateTime!
}

input CategortCreateInput {
  name: String
  products: ProductCreateNestedManyWithoutCategortsInput
}

input CategortOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input CategortUpdateInput {
  name: String
  products: ProductUpdateManyWithoutCategortsInput
}

input CategortWhereInput {
  id: StringFilter
  name: StringNullableFilter
  products: ProductListRelationFilter
}

input CategortWhereUniqueInput {
  id: String!
}

input Credentials {
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

input FloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

input JsonFilter {
  equals: JSONObject
  not: JSONObject
}

type MetaQueryPayload {
  count: Float!
}

type Mutation {
  createCategort(data: CategortCreateInput!): Categort!
  createOrder(data: OrderCreateInput!): Order!
  createProduct(data: ProductCreateInput!): Product!
  createReview(data: ReviewCreateInput!): Review!
  createUser(data: UserCreateInput!): User!
  deleteCategort(where: CategortWhereUniqueInput!): Categort!
  deleteOrder(where: OrderWhereUniqueInput!): Order!
  deleteProduct(where: ProductWhereUniqueInput!): Product!
  deleteReview(where: ReviewWhereUniqueInput!): Review!
  deleteUser(where: UserWhereUniqueInput!): User!
  login(credentials: Credentials!): UserInfo!
  updateCategort(data: CategortUpdateInput!, where: CategortWhereUniqueInput!): Categort!
  updateOrder(data: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order!
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product!
  updateReview(data: ReviewUpdateInput!, where: ReviewWhereUniqueInput!): Review!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

type Order {
  createdAt: DateTime!
  id: String!
  paymentStatus: Boolean
  paymentintent: String
  price: Float
  products(orderBy: [ProductOrderByInput!], skip: Float, take: Float, where: ProductWhereInput): [Product!]!
  status: JSON
  updatedAt: DateTime!
  user: User
}

input OrderCreateInput {
  paymentStatus: Boolean
  paymentintent: String
  price: Float
  products: ProductCreateNestedManyWithoutOrdersInput
  status: JSON
  user: UserWhereUniqueInput
}

input OrderCreateNestedManyWithoutUsersInput {
  connect: [OrderWhereUniqueInput!]
}

input OrderListRelationFilter {
  every: OrderWhereInput
  none: OrderWhereInput
  some: OrderWhereInput
}

input OrderOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  paymentStatus: SortOrder
  paymentintent: SortOrder
  price: SortOrder
  status: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input OrderUpdateInput {
  paymentStatus: Boolean
  paymentintent: String
  price: Float
  products: ProductUpdateManyWithoutOrdersInput
  status: JSON
  user: UserWhereUniqueInput
}

input OrderUpdateManyWithoutUsersInput {
  connect: [OrderWhereUniqueInput!]
  disconnect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
}

input OrderWhereInput {
  id: StringFilter
  paymentStatus: BooleanNullableFilter
  paymentintent: StringNullableFilter
  price: FloatNullableFilter
  products: ProductListRelationFilter
  status: JsonFilter
  user: UserWhereUniqueInput
}

input OrderWhereUniqueInput {
  id: String!
}

type Product {
  categort: Categort
  colors: JSON!
  createdAt: DateTime!
  description: JSON!
  dicountedPrice: Float!
  id: String!
  images: JSON
  order: Order
  reviews(orderBy: [ReviewOrderByInput!], skip: Float, take: Float, where: ReviewWhereInput): [Review!]!
  title: String!
  titlePrice: Float!
  updatedAt: DateTime!
  variants: JSON!
}

input ProductCreateInput {
  categort: CategortWhereUniqueInput
  colors: JSON!
  description: JSON!
  dicountedPrice: Float!
  images: JSON
  order: OrderWhereUniqueInput
  reviews: ReviewCreateNestedManyWithoutProductsInput
  title: String!
  titlePrice: Float!
  variants: JSON!
}

input ProductCreateNestedManyWithoutCategortsInput {
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateNestedManyWithoutOrdersInput {
  connect: [ProductWhereUniqueInput!]
}

input ProductListRelationFilter {
  every: ProductWhereInput
  none: ProductWhereInput
  some: ProductWhereInput
}

input ProductOrderByInput {
  categortId: SortOrder
  colors: SortOrder
  createdAt: SortOrder
  description: SortOrder
  dicountedPrice: SortOrder
  id: SortOrder
  images: SortOrder
  orderId: SortOrder
  title: SortOrder
  titlePrice: SortOrder
  updatedAt: SortOrder
  variants: SortOrder
}

input ProductUpdateInput {
  categort: CategortWhereUniqueInput
  colors: JSON
  description: JSON
  dicountedPrice: Float
  images: JSON
  order: OrderWhereUniqueInput
  reviews: ReviewUpdateManyWithoutProductsInput
  title: String
  titlePrice: Float
  variants: JSON
}

input ProductUpdateManyWithoutCategortsInput {
  connect: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
}

input ProductUpdateManyWithoutOrdersInput {
  connect: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
}

input ProductWhereInput {
  categort: CategortWhereUniqueInput
  colors: JsonFilter
  description: JsonFilter
  dicountedPrice: FloatFilter
  id: StringFilter
  images: JsonFilter
  order: OrderWhereUniqueInput
  reviews: ReviewListRelationFilter
  title: StringFilter
  titlePrice: FloatFilter
  variants: JsonFilter
}

input ProductWhereUniqueInput {
  id: String!
}

type Query {
  _categortsMeta(where: CategortWhereInput): MetaQueryPayload!
  _ordersMeta(where: OrderWhereInput): MetaQueryPayload!
  _productsMeta(where: ProductWhereInput): MetaQueryPayload!
  _reviewsMeta(where: ReviewWhereInput): MetaQueryPayload!
  _usersMeta(where: UserWhereInput): MetaQueryPayload!
  categort(where: CategortWhereUniqueInput!): Categort
  categorts(orderBy: [CategortOrderByInput!], skip: Float, take: Float, where: CategortWhereInput): [Categort!]!
  order(where: OrderWhereUniqueInput!): Order
  orders(orderBy: [OrderOrderByInput!], skip: Float, take: Float, where: OrderWhereInput): [Order!]!
  product(where: ProductWhereUniqueInput!): Product
  products(orderBy: [ProductOrderByInput!], skip: Float, take: Float, where: ProductWhereInput): [Product!]!
  review(where: ReviewWhereUniqueInput!): Review
  reviews(orderBy: [ReviewOrderByInput!], skip: Float, take: Float, where: ReviewWhereInput): [Review!]!
  user(where: UserWhereUniqueInput!): User
  userInfo: UserInfo!
  users(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): [User!]!
}

enum QueryMode {
  Default
  Insensitive
}

type Review {
  createdAt: DateTime!
  id: String!
  product: Product
  rating: Float
  updatedAt: DateTime!
  user: User
}

input ReviewCreateInput {
  product: ProductWhereUniqueInput
  rating: Float
  user: UserWhereUniqueInput
}

input ReviewCreateNestedManyWithoutProductsInput {
  connect: [ReviewWhereUniqueInput!]
}

input ReviewCreateNestedManyWithoutUsersInput {
  connect: [ReviewWhereUniqueInput!]
}

input ReviewListRelationFilter {
  every: ReviewWhereInput
  none: ReviewWhereInput
  some: ReviewWhereInput
}

input ReviewOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  productId: SortOrder
  rating: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input ReviewUpdateInput {
  product: ProductWhereUniqueInput
  rating: Float
  user: UserWhereUniqueInput
}

input ReviewUpdateManyWithoutProductsInput {
  connect: [ReviewWhereUniqueInput!]
  disconnect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
}

input ReviewUpdateManyWithoutUsersInput {
  connect: [ReviewWhereUniqueInput!]
  disconnect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
}

input ReviewWhereInput {
  id: StringFilter
  product: ProductWhereUniqueInput
  rating: IntNullableFilter
  user: UserWhereUniqueInput
}

input ReviewWhereUniqueInput {
  id: String!
}

enum SortOrder {
  Asc
  Desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  createdAt: DateTime!
  firstName: String
  id: String!
  isAdmin: Boolean
  lastName: String
  orders(orderBy: [OrderOrderByInput!], skip: Float, take: Float, where: OrderWhereInput): [Order!]!
  reviews(orderBy: [ReviewOrderByInput!], skip: Float, take: Float, where: ReviewWhereInput): [Review!]!
  roles: JSON
  updatedAt: DateTime!
  username: String!
}

input UserCreateInput {
  firstName: String
  isAdmin: Boolean
  lastName: String
  orders: OrderCreateNestedManyWithoutUsersInput
  password: String!
  reviews: ReviewCreateNestedManyWithoutUsersInput
  roles: JSON
  username: String!
}

type UserInfo {
  accessToken: String
  id: String!
  roles: [String!]!
  username: String!
}

input UserOrderByInput {
  createdAt: SortOrder
  firstName: SortOrder
  id: SortOrder
  isAdmin: SortOrder
  lastName: SortOrder
  password: SortOrder
  roles: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserUpdateInput {
  firstName: String
  isAdmin: Boolean
  lastName: String
  orders: OrderUpdateManyWithoutUsersInput
  password: String
  reviews: ReviewUpdateManyWithoutUsersInput
  roles: JSON
  username: String
}

input UserWhereInput {
  firstName: StringNullableFilter
  id: StringFilter
  isAdmin: BooleanNullableFilter
  lastName: StringNullableFilter
  orders: OrderListRelationFilter
  reviews: ReviewListRelationFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  id: String!
}