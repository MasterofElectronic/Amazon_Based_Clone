/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Categort as PrismaCategort,
  Product as PrismaProduct,
} from "@prisma/client";

export class CategortServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CategortCountArgs, "select">): Promise<number> {
    return this.prisma.categort.count(args);
  }

  async categorts(
    args: Prisma.CategortFindManyArgs
  ): Promise<PrismaCategort[]> {
    return this.prisma.categort.findMany(args);
  }
  async categort(
    args: Prisma.CategortFindUniqueArgs
  ): Promise<PrismaCategort | null> {
    return this.prisma.categort.findUnique(args);
  }
  async createCategort(
    args: Prisma.CategortCreateArgs
  ): Promise<PrismaCategort> {
    return this.prisma.categort.create(args);
  }
  async updateCategort(
    args: Prisma.CategortUpdateArgs
  ): Promise<PrismaCategort> {
    return this.prisma.categort.update(args);
  }
  async deleteCategort(
    args: Prisma.CategortDeleteArgs
  ): Promise<PrismaCategort> {
    return this.prisma.categort.delete(args);
  }

  async findProducts(
    parentId: string,
    args: Prisma.ProductFindManyArgs
  ): Promise<PrismaProduct[]> {
    return this.prisma.categort
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .products(args);
  }
}
